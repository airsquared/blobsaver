/*
 * Copyright (c) 2023  airsquared
 *
 * This file is part of blobsaver.
 *
 * blobsaver is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * blobsaver is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with blobsaver.  If not, see <https://www.gnu.org/licenses/>.
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id 'com.github.ben-manes.versions' version '0.46.0'
    id 'org.beryx.jlink' version '2.26.0'
    id 'org.openjfx.javafxplugin' version '0.0.14'

    id 'idea'
}
idea.module.outputDir file('out/production/classes') // fix running via IntelliJ

/*
 * REMEMBER: also update the version string in Main.java
 */
version = '3.5.1'
description = 'A cross-platform GUI and CLI app for saving SHSH blobs'
String appIdentifier = 'airsquared.blobsaver.app'
String copyright = 'Copyright (c) 2023 airsquared'
def os = DefaultNativePlatform.currentOperatingSystem

startScripts.enabled = distZip.enabled = distTar.enabled = false

java.toolchain.languageVersion = JavaLanguageVersion.of(19)

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation ('de.jangassen:nsmenufx:3.1.0') {
        exclude group: 'net.java.dev.jna', module: 'jna' //different jna version
    }
    implementation 'net.java.dev.jna:jna-jpms:5.13.0'
    implementation 'org.apache.commons:commons-compress:1.23.0'
    implementation 'info.picocli:picocli:4.7.4'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
}

javafx {
    version = '20'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

def addExports = ['--add-exports=javafx.graphics/com.sun.javafx.css=airsquared.blobsaver', '--add-exports=java.base/jdk.internal.misc=airsquared.blobsaver']

compileJava {
    options.compilerArgs.addAll addExports
}

application {
    mainModule = 'airsquared.blobsaver'
    mainClass = 'airsquared.blobsaver.app.Main'
    applicationDefaultJvmArgs.addAll addExports
}

private String getJarDirectory() {
    String dir = ""
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) dir = 'macos/Contents'
    else if (DefaultNativePlatform.currentOperatingSystem.isWindows()) dir = 'windows/files'
    else if (DefaultNativePlatform.currentOperatingSystem.isLinux()) dir = 'linux'
    return "${projectDir}/dist/${dir}"
}

run {
    systemProperty 'jar.directory', getJarDirectory()
}

test {
    useJUnitPlatform()
    systemProperty 'jar.directory', getJarDirectory()
    jvmArgs addExports
    jvmArgs '--add-exports=javafx.graphics/com.sun.glass.ui=org.testfx.monocle'
}

jlink {
    if (findProperty('noCompress') != 'true') {
        addOptions '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--strip-native-commands',
                '--dedup-legal-notices=error-if-not-same-content'
    }
    launcher {
        jvmArgs = [ '-Djar.directory={{BIN_DIR}}' ]
        jvmArgs.addAll addExports
        if (findProperty('noConsole') != 'false') {
            noConsole = true
        }
    }
    jpackage {
        imageOptions = [ '--copyright', copyright, '--description', description]
        installerOptions.addAll '--about-url', 'https://github.com/airsquared/blobsaver'
        vendor = 'airsquared'
        installerOutputDir = file("${buildDir}/distributions/")

        if (os.isMacOsX()) {
            installerType = 'dmg'
            String arch = DefaultNativePlatform.currentArchitecture.amd64 ? 'intel' : 'arm'
            installerName = "${name}-${arch}"
            imageOptions.addAll '--mac-package-identifier', appIdentifier
            icon = "${projectDir}/dist/macos/Contents/Resources/blob.icns"
        } else if (os.isWindows()) {
            installerOptions.addAll '--win-dir-chooser', '--win-menu', '--win-shortcut'
            icon = "${projectDir}/dist/windows/blob.ico"
        } else {
            installerOptions.addAll '--linux-shortcut', '--linux-menu-group', 'Utility;Archiving;Java',
                    '--linux-rpm-license-type', 'GPLv3'
            icon = "${projectDir}/src/main/resources/airsquared/blobsaver/app/blob_emoji.png"
        }
        if (findProperty('installerType') != null) {
            installerType = findProperty('installerType')
        }
    }
    if (os.isMacOsX()) jpackageImage.doLast {
        copy {
            from "${projectDir}/dist/macos/Contents/MacOS" into "${buildDir}/jpackage/blobsaver.app/Contents/MacOS"
        }
        copy {
            from "${projectDir}/dist/macos/Contents/Frameworks" into "${buildDir}/jpackage/blobsaver.app/Contents/Frameworks"
        }
        copy {
            from "${projectDir}/LICENSE", "${projectDir}/libraries_used.txt"
            into "${buildDir}/jpackage/blobsaver.app/Contents/Resources"
        }
        exec { // needed to prevent "application is damaged" error when opening quarantined app
            commandLine 'codesign', '--force', '--deep', '--sign', '-', "${buildDir}/jpackage/blobsaver.app"
        }
    } else if (os.isWindows()) jpackageImage.doLast {
        copy {
            from "${projectDir}/dist/windows/files", "${buildDir}/jpackage/blobsaver/runtime/bin/zip.dll"
            rename 'LICENSE_windows', 'LICENSE'
            rename 'libraries_used_windows.txt', 'libraries_used.txt'
            into "${buildDir}/jpackage/blobsaver"
        }
    } else jpackageImage.doLast {
        copy {
            from "${projectDir}/dist/linux", "${projectDir}/LICENSE", "${projectDir}/libraries_used.txt"
            into "${buildDir}/jpackage/blobsaver/lib"
        }
    }

}

task createZip(type: Zip, dependsOn: jpackageImage) {
    if (os.isMacOsX()) {
        String arch = DefaultNativePlatform.currentArchitecture.amd64 ? 'intel' : 'arm'
        archiveFileName = "${project.name}-${arch}-${project.version}.zip"
    } else {
        archiveFileName = "${project.name}-${project.version}.zip"
    }
    from "${buildDir}/jpackage"
    destinationDirectory = file("${buildDir}/distributions/")
}

task createTgz(type: Tar, dependsOn: jpackageImage) {
    if (os.isMacOsX()) {
        String arch = DefaultNativePlatform.currentArchitecture.amd64 ? 'intel' : 'arm'
        archiveFileName = "${project.name}-${arch}-${project.version}.tgz"
    } else {
        archiveFileName = "${project.name}-${project.version}.tgz"
    }
    compression = Compression.GZIP
    from "${buildDir}/jpackage"
    destinationDirectory = file("${buildDir}/distributions/")
}

task windowsInstaller(dependsOn: jpackageImage) { // requires inno setup to be installed
    doFirst {
        copy {
            from "${projectDir}/dist/windows/blob.ico" into "${buildDir}/jpackage"
        }
        copy {
            from "${projectDir}/dist/windows/blobsaver.iss" into "${buildDir}/jpackage"
            filter(ReplaceTokens, tokens: [AppName: project.name, AppVersion: version, AppCopyright: copyright,
                                           OutputDir: "${buildDir}\\distributions".toString()])
        }
        exec {
            commandLine 'iscc', '/Qp', "${buildDir}\\jpackage\\blobsaver.iss"
        }
        delete "${buildDir}/jpackage/blobsaver.iss"
    }
}

task bumpCaskPR(type: Exec) {
    commandLine 'brew', 'bump-cask-pr', 'blobsaver', '--no-audit', '--no-style', '--version', version
}

if (!os.isWindows()) { // never do jpackage on windows
    assemble.dependsOn jpackage // will be disabled on other OS if installerType is set to certain values
}
if (findProperty('installerType') == 'tar.gz' || findProperty('installerType') == 'tgz') {
    jpackage.enabled = false
    assemble.dependsOn createTgz
}
if (findProperty('installerType') == 'zip') {
    jpackage.enabled = false
    assemble.dependsOn createZip
}
if (findProperty('installerType') == 'portable') {
    jpackage.enabled = false
}
if (os.isMacOsX() && findProperty('installerType') == null) {
    jpackage.finalizedBy createZip
}
if (os.isLinux() && findProperty('installerType') == null) {
    jpackage.finalizedBy createTgz
}
if (os.isWindows() && findProperty('installerType') == null) {
    assemble.dependsOn windowsInstaller
}
